dt:25.01.2022

variable: 
     its used to store data in memory location(name given to memory location)
     A python variable is a reserved memory location to  store values(in otherwords variable in python program gives data to computer for processing)
     A variable is created at the moment we first assign a value to it
     the value stored in the variable can be changed during program execution
     all operation done on the variable effects the memory location
     
     standard:
       A variable should be usuable name(related to project or task)
       ex prg:
         # a integer assignment
            age = 30
         #a floating point
         salary =  1450.7
     print(age)
     print(salary)
     
     try to use camel case as much as possible for long variable
     camel case is the pep standard,it removes all spaces and change the case of firstletter in small case and others words first lettrer in upper case
     Example:
     input: Welcome to python
     output in camel case:welcomeToPython
           
     rules for creating variable
     
        A variable must start with letter or(_)
        (ex)
        age = 25
       first_name = ahmed
       pint(first_name,'is',age,'years old)
        #o/p: ahmed is 25 years old
             
        a variable name caanot  start with a  no
          (Ex)
          
       # 5 apples=100 (cannot assign this method because its started with no)
       apples_5=100
       print("price of 5 apple is",apple_5)
       #o/P:price of 5 apple is 100
       
        a variable name can only contain alpha numeric characters and(_)
        
         ex prg:(addition of two no)
        number_1= 10
        number_2= 5
        sum = number_1+number_2
        print(sum)  
         #o/p:sum=15
         
        the variable name are case sensitive
        (ex)
        name = sathya
        Name = nikesh
        print(name)
       # output is sathya
        print(Name)
       # output is nikesh
       
        the reserved word(keyword) caanot be used a variable name
        #we cannot assign for it else true these word as a variable name
        
        
      differnce between compailer and interpreter:
      
            Interpreter
				                                                      Compiler
		
Translates program one statement at a time.         
				                                        Scans the entire program and translates it as a whole into machine code.	
Interpreters usually take less amount of time 
to analyze the source code.
However, the overall execution time is comparatively         Compilers usually take a large amount of time to analyze the source code.
                                                                However, the overall execution time is comparatively faster than interpreters.
		
slower than compailer				                          
No Object Code is generated, hence are memory efficient.    Generates Object Code which further requires linking, hence requires more memory. 
				                                         
Programming languages like JavaScript, Python.
				                                          Programming languages like C, C++, Java use compilers.
		
       
        compailer working method:
        
                   preprocessing                    processing
       SOURCE CODE-----------------> OBECT CODE---------------------->MACHINE
       
       interpeter working method:
       
        
                   preprocessing                          processing
       SOURCE CODE-----------------> INTERMEDIATE CODE---------------------->INTERPRETER
       
       
       KEYWORDS
  
        Keywords are predefined words given  by the interpreter
        each one has own identity and specific task
        there are 33 keywords in python
      rules:variable name should not match with keyword
  
  some reserved keywords are:
  
  
  True, False, None

    True: This keyword is used to represent a boolean true. If a statement is true, “True” is printed.
    
    False: This keyword is used to represent a boolean false. If a statement is false, “False” is printed. 
    
    None:  special constant used to denote a null value. 
    It’s important to remember, 0, any empty container(e.g empty list) does not compute to None. 
    It is an object of its datatype – NoneType. It is not possible to create multiple None objects 
    and can assign them to variables.

example:
  print(False == 0)
  print(True == 1)
  
   print(True + True + True)
  print(True + False + False)
  
  print(None == 0)
  print(None == [])

Output

True
True
3
1
False
False

ieration Keywords – for, while, break, continue

    for: This keyword is used to control flow and for looping.
      example:
      Using for loop
for i in range(10):
  
    print(i, end = " ")
          
     
    break: “break” is used to control the flow of the loop. The statement is used to break out of the loop and passes the
    control to the statement following immediately after loop.
    
     # break the loop as soon it sees 6
     example:
    if i == 6:
        break
   print()
       
       while: Has a similar working like “for”, used to control flow and for looping.
    continue: “continue” is also used to control the flow of code. The keyword skips the current iteration of the loop but does not end the loop.

Example:
# square of given no
n=int(raw_input())
i=0
while(i<n)
print(i*i)
i+=1

#inputn=3
#output:
0
1
4

  
Conditional keywords – if, else, elif

    if : It is a control statement for decision making. Truth expression forces control to go in “if” statement block.
    else : It is a control statement for decision making. False expression forces control to go in “else” statement block.
    elif : It is a control statement for decision making. It is short for “else if“

Example: if, else, and elif keyword

 i = 20
if (i == 10):
    print ("i is 10")
elif (i == 20):
    print ("i is 20")
else:
    print ("i is not present")
Output: i is 20

def
def keyword is used to declare user defined functions.
Example: def keyword

# def keyword
def fun(): #function declaration
    print("Inside Function")
      
fun()  #function call

Output: Inside Function

Return Keywords – Return, Yield

    return : This keyword is used to return from the function.
    yield : This keyword is used like return statement but is used to return a generator.
    
 yield                                                 return
provide output and continue                      provides output and stop
it gives back genrators output                   it gives actual returned output
it keeps state of local variable                 it destroys the state of local variable
it does not exit the function                     it exist the function

class

class keyword is used to declare user defined classes.
class is blue print of obect or template

Example: Class Keyword

With

with keyword is used to wrap the execution of block of code within methods defined by context manager.
.
Example: With Keyword

# using with statement
with open('file_path', 'w') as file:
    file.write('hello world !')
as

as keyword is used to create the alias for the module imported. ( giving a new name to the imported module)
E.g import math as mymath.
Example: as Keyword

import math as gfg
  
print(gfg.factorial(5))

Output:120

pass

pass is the null statement in python. Nothing happens when this is encountered.
This is used to prevent indentation errors and used as a placeholder.
Example: Pass Keyword

n = 10
for i in range(n):
      
# pass can be used as placeholder
pass


Lambda

Lambda keyword is used to make inline returning functions with no statements allowed internally. 

Example: Lambda Keyword

# Lambda keyword
g = lambda x: x*x*x
  
print(g(7))
Output

343

Import, From

    import : This statement is used to include a particular module into current program.
    from : Generally used with import, from is used to import particular 

# import keyword
import math
print(math.factorial(10))
 Output:3628800
 
# from keyword
from math import factorial
print(factorial(10))
Output:3628800

PEP stands for Python Enhancement Proposal. A PEP is a design document providing information to the Python community, or describing a new feature for Python
or its processes or environment. The PEP should provide a concise technical specification of the feature and a rational for the feature.

Python maintains a strict way of order and format of scripting.Following this sometimes mandatory and is a great help on the user’s end, to understand. 
Making it easy for others to read code is always a good idea, and adopting a nice coding style helps tremendously for that.

For Python, PEP 8 has emerged as the style guide that most projects adhere to; it promotes a very readable and eye-pleasing coding style. 
Every Python developer should read it at some point.

Some important points:

1. Use 4-space indentation and no tabs.

    # First line contains no argument. Second line onwards 
    # more indentation included to distinguish this from  
    # the rest. 
    def function_name( 
            variable_one, variable_two, variable_three, 
            variable_four): 
        print(variable_one) 

2. Use docstrings : There are both single and multi-line docstrings that can be used in Python.
However, the single line comment fits in one line, triple quotes are used in both cases. These are used to define a particular
program or define a particular function.
Example:

    def exam(): 
        """This is single line docstring""" 
     
        """This is 
        a 
        multiline comment""" 

3. Wrap lines so that they don’t exceed 79 characters : The Python standard library is conservative and requires limiting lines to 79 characters. 
The lines can be wrapped using parenthesis, brackets, and braces. They should be used in preference to backslashes.
Example:

    with open('/path/from/where/you/want/to/read/file') as file_one, \ 
         open('/path/where/you/want/the/file/to/be/written', 'w') as file_two: 
        file_two.write(file_one.read()) 

4. Use of trailing commas : This is not mandatory except while making a tuple.
Example:

    tup = ("geek",) 

5. Use Python’s default UTF-8 or ASCII encodings and not any fancy encodings, if it is meant for international environment.

6. Use spaces around operators and after commas, but not directly inside bracketing constructs:

    a = f(1, 2) + g(3, 4) 

7. Naming Conventions : There are few naming conventions that should be followed in order to make the program less complex and more readable. 
At the same time, the naming conventions in Python is a bit of mess, but here are few conventions that can be followed easily.




  
  DATA TYPE:  
       clasification or categorization of data.
       variable use to reserve some space 
       in memory representation of data(int,float,char)
         a type reprenst two things about a variable
         what type of data allowed to store
         how much memory is required to store a data
         
          
      integers – This value is represented by int class. It contains positive or negative whole numbers (without fraction or decimal). 
      In Python there is no limit for length.
      
    Float – This value is represented by float class. It is a real number with floating point representation. It is specified by a decimal point.
        
    Complex Numbers – Complex number is represented by complex class. It is specified as (real part) + (imaginary part)j.
    For example –( 2+3j)

example: 
#numeric value
  
a = 5
print("Type of a: ", type(a))
  
b = 5.0
print("Type of b: ", type(b))
  
c = 2 + 4j
print("Type of c: ", type(c))

Output:

Type of a:  <class 'int'>

Type of b:  <class 'float'>

Type of c:  <class 'complex

boolean:  it always check the condition and produce output true or false
  return or convert the value to the Boolean value 
	      

The bool method returns the following values.

    It returns True if a parameter or value passed is True.
    It returns False if a parameter or value passed is False.
    
    example.

Min = True
print(bool(Min)) 

Max = False
print(bool(Max)) 

x = 19
y = 11
print(bool(x==y))

output.

True
False
False

        
STRING:                       
        Strings are arrays of bytes representing Unicode characters. A string is a collection of one or more characters
	put in a single quote, double-quote or triple quote. In python there is no character data type, a character is a string of length one.
	its represented in str class.
	
	Creating String

Strings in Python can be created using single quotes or double quotes or even triple quotes.



# Python Program for 
# Creation of String 
    
# Creating a String  
# with single Quotes 
String1 = 'Welcome to python'
print("String with the use of Single Quotes: ") 
print(String1) 
    
# Creating a String 
# with double Quotes 
String1 = "hello world"
print("\nString with the use of Double Quotes: ") 
print(String1) 
print(type(String1))
    
# Creating a String 
# with triple Quotes 
String1 = '''hello world welcome to python''
print("\nString with the use of Triple Quotes: ") 
print(String1) 
print(type(String1))
  
# Creating String with triple 
# Quotes allows multiple lines 
String1 = '''hello 
            world 
            python'''
print("\nCreating a multiline String: ") 
print(String1) 

Output:

String with the use of Single Quotes: 
Welcome to the python

String with the use of Double Quotes: 
hello world
<class 'str'>

String with the use of Triple Quotes: 
hello world welcome to python
<class 'str'>

Creating a multiline String: 

            hello
	    world 
            python

 
accessing elements of String:

 String can be accessed by using the method of Indexing. Indexing allows negative address references to access characters 
 from the back of the String.

string indexing

    H  E  L  L  O  W  O  R  L  D
    0  1  2  3  4  5  6  7  8  9  ------->FORWARD INDEXING
   -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 ---------- >BACKWARD INDEXIMG
 
    -----------------------------------------------------
      dt:26.01.2022
      -------------------------------------------------
      
     OPERATORS:
     Operators are special symbols  that carry out arithmetic or logical computation. 
     The value that the operator operates on is called the operand.


     comparision operator:
     
     Comparison operators are used to compare values. It returns either True or False according to the condition.
     
Operator
						Example
		
>
				Greater than - True if left operand is greater than the right
				(x > y)
		
<
				Less than - True if left operand is less than the right
				(x < y)
		

==				Equal to - True if both operands are equal
				(x == y)
		

!=				Not equal to - True if operands are not equal
				(x != y)
		

>=				Greater than or equal to - True if left operand is greater than or equal to the right
				(x >= y)
		

<=				Less than or equal to - True if left operand is less than or equal to the right
				(x <= y)
		
Example :

x = 5
y = 10

# Output: x > y is False
print("x > y is",x>y)

# Output: x < y is True
print("x < y is",x<y)

# Output: x == y is False
print("x == y is",x==y)

# Output: x != y is True
print("x != y is",x!=y)

# Output: x >= y is False
print("x >= y is",x>=y)

# Output: x <= y is True
print("x <= y is",x<=y)

Output

x > y is False
x < y is True
x == y is False
x != y is True
x >= y is False
x <= y is True

Logical operators:

Logical operators are the and, or, not operators.


operator			meaning	
				
		

and				True if both the operands are true
				(x and y)
		

or				True if either of the operands is true
				(x or y)
		

not				True if operand is false (complements the operand)
				(not x)
		
Example:

x = True
y = False

print('x and y is',x and y)

print('x or y is',x or y)

print('not x is',not x)

Output

x and y is False
x or y is True
not x is False

Bitwise operators

They operate bit by bit.Bitwise operators act on operands as if they were strings of binary digits. 


Let x = 10 (0000 1010 in binary) and y = 4 (0000 0100 in binary)

operator				Meaning
						

&				Bitwise AND
				x & y = 0 (0000 0000)
		

|				Bitwise OR
				x | y = 14 (0000 1110)
		

~				Bitwise NOT
				~x = -11 (1111 0101)
		
^
				Bitwise XOR
				x ^ y = 14 (0000 1110)
		
>>
				Bitwise right shift
				x >> 2 = 2 (0000 0010)
		
<<
				Bitwise left shift
				x << 2 = 40 (0010 1000)
		
Assignment operators

Assignment operators are used to assign values to variables.

a = 10 is a simple assignment operator that assigns the value 10 on the right to the variable a on the left.

There are various compound operators in Python like a += 5 that adds to the variable and later assigns the same. It is equivalent to a = a + 5.

operator		
				Equivalent to
		

=				x = 5
				x = 5
		

+=				x += 5
				x = x + 5
		

-=				x -= 5
				x = x - 5
		

*=				x *= 5
				x = x * 5
		

/=				x /= 5
				x = x / 5
		

%=				x %= 5
				x = x % 5
		

				x //= 5
//=				x = x // 5
		

				x **= 5
**=				x = x ** 5
		

				x &= 5
&=				x = x & 5
		

				x |= 5
|=				x = x | 5
		

^=				x ^= 5
				x = x ^ 5
		

>>=				x >>= 5
				x = x >> 5
		

				x <<= 5
<<=				x = x << 5



MEMBERSHIP OPERATORS:
		

      in and not in are the membership operators in Python. They are used to test whether a value or variable is 
      found in a sequence (string, list, tuple, set and dictionary).



operator				Meaning
				
		
in
				True if value/variable is found in the sequence
				(5 in x)
		
not in
				True if value/variable is not found in the sequence
				(5 not in x)
		
Example : program using string

x = 'Hello world'


# Output: True
print('H' in x)

# Output: True
print('python' not in x)

Output

True
True


TERNARY OPERATORS:

     Ternary operators are also known as conditional expressions are operators that evaluate something based on a condition being true or false. 
     
       note:  First the given condition is evaluated (a < b), then either a or b is returned based on the Boolean value returned by the condition.
    order of the arguments in the operator is different from other languages like C/C++ 
    Conditional expressions have the lowest priority compare than all python operations.


Example:
a=10
b=20


if a != b:
    if a > b:
        print("a is greater than b")
    else:
        print("b is greater than a")
else:
    print("Both a and b are equal")

Output:

 b is greater than a

          

        
        
        
        
        
        
